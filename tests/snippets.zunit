#!/usr/bin/env zunit

@setup {
  load setup
  setup
}

@teardown {
  load teardown
  teardown
}

@test 'zinit OMZL::spectrum.zsh installation' {
  run ./scripts/docker-run.sh --wrap --debug --zunit \
    zinit snippet OMZL::spectrum.zsh

  assert $state equals 0
  assert "$output" contains "Setting up snippet"

  local artifact="${SNIPPETS_DIR}/OMZL::spectrum.zsh/OMZL::spectrum.zsh"
  assert "$artifact" is_file
  assert "$artifact" is_readable
}

@test 'zinit OMZP::git installation' {
  run ./scripts/docker-run.sh --wrap --debug --zunit \
    zinit snippet OMZP::git

  assert $state equals 0
  assert "$output" contains "Setting up snippet"

  local artifact="${SNIPPETS_DIR}/OMZP::git/OMZP::git"
  assert "$artifact" is_file
  assert "$artifact" is_readable
}

@test 'zinit PZTM::environment installation' {
  run ./scripts/docker-run.sh --wrap --debug --zunit \
    zinit snippet PZTM::environment

  assert $state equals 0
  assert "$output" contains "Setting up snippet"

  local artifact="${SNIPPETS_DIR}/PZTM::environment/PZTM::environment"
  assert "$artifact" is_file
  assert "$artifact" is_readable
}

@test 'zinit local snippet symlink' {
  mkdir -p "${DATA_DIR}/external"
  cat<<EOF >"${DATA_DIR}/external/mysnippet.zsh"
alias foo=date
EOF

  local z=$'zinit is-snippet link id-as'\''mysnippet'\'' for /data/external/mysnippet.zsh'
  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 0
  assert "$output" contains "Setting up snippet"
  assert "$output" contains "Linking"

  local artifact="${SNIPPETS_DIR}/mysnippet/mysnippet"
  assert $artifact is_link
  assert $artifact is_readable

  local target="$(readlink "$artifact")"
  assert "$target" same_as "../../external/mysnippet.zsh"
}

# vim: set ft=zsh et ts=2 sw=2 : #
